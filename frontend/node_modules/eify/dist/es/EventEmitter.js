import { __extends, __spreadArray } from "tslib";
import { AbstractEventEmitter } from "./AbstractEventEmitter";
var EventEmitter = (function (_super) {
    __extends(EventEmitter, _super);
    function EventEmitter(options) {
        return _super.call(this, options) || this;
    }
    EventEmitter.prototype.emit = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return _super.prototype.emit.apply(this, __spreadArray([name], args, false));
    };
    EventEmitter.prototype.emitSerial = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return _super.prototype.emitSerial.apply(this, __spreadArray([name], args, false));
    };
    EventEmitter.prototype.emitParallel = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return _super.prototype.emitParallel.apply(this, __spreadArray([name], args, false));
    };
    EventEmitter.prototype.emitAsync = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.emitAsync.apply(this, __spreadArray([name], args, false));
    };
    return EventEmitter;
}(AbstractEventEmitter));
export { EventEmitter };
