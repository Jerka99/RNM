import { __assign, __extends } from "tslib";
import { AbstractEventEmitter } from "./AbstractEventEmitter";
var DOMEventEmitter = (function (_super) {
    __extends(DOMEventEmitter, _super);
    function DOMEventEmitter(target, options) {
        var _this = _super.call(this, __assign({ requireLoopRemove: true }, options)) || this;
        _this.target = target;
        return _this;
    }
    DOMEventEmitter.defineEvent = function (descriptor) {
        var name = descriptor && descriptor.name;
        if (!name)
            return;
        var names = name instanceof Array ? name : [name];
        names.forEach(function (it) {
            DOMEventEmitter.__composeEvents[it] = descriptor;
        });
    };
    DOMEventEmitter.getEventDescriptor = function (name) {
        return DOMEventEmitter.__composeEvents[name];
    };
    DOMEventEmitter.prototype.addListener = function (name, listener, capture) {
        if (capture === void 0) { capture = false; }
        _super.prototype.addListener.call(this, name, listener);
        this.target.addEventListener(name, listener, capture);
        var descriptor = DOMEventEmitter.getEventDescriptor(name);
        if (!descriptor)
            return;
        descriptor.addListener(this, name, listener, capture);
    };
    DOMEventEmitter.prototype.removeListener = function (name, listener, capture) {
        if (capture === void 0) { capture = false; }
        _super.prototype.removeListener.call(this, name, listener);
        this.target.removeEventListener(name, listener, capture);
        var descriptor = DOMEventEmitter.getEventDescriptor(name);
        if (!descriptor)
            return;
        descriptor.removeListener(this, name, listener, capture);
    };
    DOMEventEmitter.prototype.dispatch = function (name, detail, options) {
        var event = new CustomEvent(name, __assign(__assign({}, options), { detail: detail }));
        return this.target.dispatchEvent(event);
    };
    DOMEventEmitter.__composeEvents = {};
    return DOMEventEmitter;
}(AbstractEventEmitter));
export { DOMEventEmitter };
