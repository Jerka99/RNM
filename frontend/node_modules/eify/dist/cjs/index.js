'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');

var AbstractEventEmitter = (function () {
    function AbstractEventEmitter(options) {
        var _a = tslib.__assign({}, options), _b = _a.maxListeners, maxListeners = _b === void 0 ? 1024 : _b, _c = _a.requireLoopRemove, requireLoopRemove = _c === void 0 ? false : _c;
        this.__maxListeners = maxListeners;
        this.__listeners = {};
        this.__requireLoopRemove = requireLoopRemove;
    }
    AbstractEventEmitter.prototype.addListener = function (name, listener) {
        this.__listeners[name] = this.__listeners[name] || [];
        this.__listeners[name].push(listener);
        var maxListeners = this.__maxListeners;
        if (this.__listeners[name].length > maxListeners) {
            var error = "The '".concat(name, "' listener is not more than ").concat(maxListeners);
            console.warn(error, this);
        }
    };
    AbstractEventEmitter.prototype.on = function (name, listener) {
        return this.addListener(name, listener);
    };
    AbstractEventEmitter.prototype.removeListener = function (name, listener) {
        if (!this.__listeners[name] || !listener)
            return;
        this.__listeners[name] = this.__listeners[name].filter(function (it) { return it !== listener; });
    };
    AbstractEventEmitter.prototype.off = function (name, listener) {
        return this.removeListener(name, listener);
    };
    AbstractEventEmitter.prototype.removeAllListener = function (name) {
        var _this = this;
        if (name) {
            if (this.__requireLoopRemove && this.__listeners[name]) {
                this.__listeners[name].slice(0).forEach(function (it) {
                    _this.removeListener(name, it);
                });
            }
            this.__listeners[name] = [];
        }
        else {
            if (this.__requireLoopRemove) {
                Object.keys(this.__listeners).forEach(function (it) {
                    _this.removeAllListener(it);
                });
            }
            this.__listeners = {};
        }
    };
    AbstractEventEmitter.prototype.emit = function (name) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!this.__listeners[name])
            return;
        var listeners = this.__listeners[name].slice(0);
        return listeners.map(function (it) { return it.call.apply(it, tslib.__spreadArray([_this], args, false)); });
    };
    AbstractEventEmitter.prototype.emitSerial = function (name) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!this.__listeners[name])
            return;
        var listeners = this.__listeners[name].slice(0);
        return listeners.reduce(function (result, it) { return tslib.__awaiter(_this, void 0, void 0, function () {
            return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, result];
                    case 1:
                        if ((_a.sent()) === false)
                            return [2, false];
                        return [2, it.call.apply(it, tslib.__spreadArray([this], args, false))];
                }
            });
        }); }, true);
    };
    AbstractEventEmitter.prototype.emitParallel = function (name) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!this.__listeners[name])
            return;
        var listeners = this.__listeners[name].slice(0);
        return Promise.all(listeners.map(function (it) { return it.call.apply(it, tslib.__spreadArray([_this], args, false)); }));
    };
    AbstractEventEmitter.prototype.emitAsync = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.emitParallel.apply(this, tslib.__spreadArray([name], args, false));
    };
    return AbstractEventEmitter;
}());

var EventEmitter = (function (_super) {
    tslib.__extends(EventEmitter, _super);
    function EventEmitter(options) {
        return _super.call(this, options) || this;
    }
    EventEmitter.prototype.emit = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return _super.prototype.emit.apply(this, tslib.__spreadArray([name], args, false));
    };
    EventEmitter.prototype.emitSerial = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return _super.prototype.emitSerial.apply(this, tslib.__spreadArray([name], args, false));
    };
    EventEmitter.prototype.emitParallel = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return _super.prototype.emitParallel.apply(this, tslib.__spreadArray([name], args, false));
    };
    EventEmitter.prototype.emitAsync = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.emitAsync.apply(this, tslib.__spreadArray([name], args, false));
    };
    return EventEmitter;
}(AbstractEventEmitter));

var DOMEventEmitter = (function (_super) {
    tslib.__extends(DOMEventEmitter, _super);
    function DOMEventEmitter(target, options) {
        var _this = _super.call(this, tslib.__assign({ requireLoopRemove: true }, options)) || this;
        _this.target = target;
        return _this;
    }
    DOMEventEmitter.defineEvent = function (descriptor) {
        var name = descriptor && descriptor.name;
        if (!name)
            return;
        var names = name instanceof Array ? name : [name];
        names.forEach(function (it) {
            DOMEventEmitter.__composeEvents[it] = descriptor;
        });
    };
    DOMEventEmitter.getEventDescriptor = function (name) {
        return DOMEventEmitter.__composeEvents[name];
    };
    DOMEventEmitter.prototype.addListener = function (name, listener, capture) {
        if (capture === void 0) { capture = false; }
        _super.prototype.addListener.call(this, name, listener);
        this.target.addEventListener(name, listener, capture);
        var descriptor = DOMEventEmitter.getEventDescriptor(name);
        if (!descriptor)
            return;
        descriptor.addListener(this, name, listener, capture);
    };
    DOMEventEmitter.prototype.removeListener = function (name, listener, capture) {
        if (capture === void 0) { capture = false; }
        _super.prototype.removeListener.call(this, name, listener);
        this.target.removeEventListener(name, listener, capture);
        var descriptor = DOMEventEmitter.getEventDescriptor(name);
        if (!descriptor)
            return;
        descriptor.removeListener(this, name, listener, capture);
    };
    DOMEventEmitter.prototype.dispatch = function (name, detail, options) {
        var event = new CustomEvent(name, tslib.__assign(tslib.__assign({}, options), { detail: detail }));
        return this.target.dispatchEvent(event);
    };
    DOMEventEmitter.__composeEvents = {};
    return DOMEventEmitter;
}(AbstractEventEmitter));

exports.AbstractEventEmitter = AbstractEventEmitter;
exports.DOMEventEmitter = DOMEventEmitter;
exports.EventEmitter = EventEmitter;
