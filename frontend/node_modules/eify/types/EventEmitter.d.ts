import { AbstractEventEmitter, StringKeyOf } from "./AbstractEventEmitter";
import { EventEmitterOptions } from "./EventEmitterOptions";
import { EventMap } from "./EventMap";
export declare class EventEmitter<T extends EventMap = EventMap> extends AbstractEventEmitter<T> {
    constructor(options?: EventEmitterOptions);
    emit<N extends StringKeyOf<T>>(name: N, ...args: Parameters<T[N]>): ReturnType<T[N]>[];
    emitSerial<N extends StringKeyOf<T>>(name: N, ...args: Parameters<T[N]>): Promise<boolean>;
    emitParallel<N extends StringKeyOf<T>>(name: N, ...args: Parameters<T[N]>): Promise<ReturnType<T[N]>[]>;
    emitAsync<N extends StringKeyOf<T>>(name: N, ...args: Parameters<T[N]>): Promise<ReturnType<T[N]>[]>;
}
