import { EventEmitterOptions } from "./EventEmitterOptions";
import { EventMap } from "./EventMap";
export declare type StringKeyOf<T> = Exclude<keyof T, number | symbol>;
export declare abstract class AbstractEventEmitter<T extends EventMap = EventMap> {
    private __maxListeners;
    private __listeners;
    private __requireLoopRemove;
    constructor(options?: EventEmitterOptions & {
        requireLoopRemove?: boolean;
    });
    addListener<N extends StringKeyOf<T>>(name: N, listener: T[N]): void;
    on<N extends StringKeyOf<T>>(name: N, listener: T[N]): void;
    removeListener<N extends StringKeyOf<T>>(name: N, listener: T[N]): void;
    off<N extends StringKeyOf<T>>(name: N, listener: T[N]): void;
    removeAllListener<N extends StringKeyOf<T>>(name?: N): void;
    protected emit<N extends StringKeyOf<T>>(name: N, ...args: Parameters<T[N]>): ReturnType<T[N]>[];
    protected emitSerial<N extends StringKeyOf<T>>(name: N, ...args: Parameters<T[N]>): Promise<boolean>;
    protected emitParallel<N extends StringKeyOf<T>>(name: N, ...args: Parameters<T[N]>): Promise<ReturnType<T[N]>[]>;
    protected emitAsync<N extends StringKeyOf<T>>(name: N, ...args: Parameters<T[N]>): Promise<ReturnType<T[N]>[]>;
}
