import { AbstractEventEmitter, StringKeyOf } from "./AbstractEventEmitter";
import { DOMEventDescriptor } from "./DOMEventDescriptor";
import { EventEmitterOptions } from "./EventEmitterOptions";
import { EventMap } from "./EventMap";
export declare class DOMEventEmitter<T extends EventMap = EventMap> extends AbstractEventEmitter<T> {
    target: EventTarget;
    protected static __composeEvents: Record<string, DOMEventDescriptor>;
    static defineEvent(descriptor: DOMEventDescriptor): void;
    static getEventDescriptor(name: string): DOMEventDescriptor;
    constructor(target: EventTarget, options?: EventEmitterOptions);
    addListener<N extends StringKeyOf<T>>(name: N, listener: T[N], capture?: boolean): void;
    removeListener<N extends StringKeyOf<T>>(name: N, listener?: T[N], capture?: boolean): void;
    dispatch<N extends StringKeyOf<T>>(name: string, detail: Parameters<T[N]>[0], options?: {
        cancelable: boolean;
        bubbles: boolean;
    }): boolean;
}
